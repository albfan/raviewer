"""Tests for raw view"""

import re
from glob import glob
from os import environ

import numpy as np
import pytest

from raviewer.image.color_format import AVAILABLE_FORMATS
from raviewer.parser.factory import ParserFactory
from raviewer.src.utils import determine_color_format


class RawColoringTestHelpers:

    @classmethod
    def generate_expected(cls, parser, image):
        """Generate and save raw view image"""

        out = parser.raw_coloring(image)
        if out is not None:
            np.save(
                cls.test_reference_path(image.color_format.name, image.width,
                                        image.height), out)

    @classmethod
    def test_reference_path(cls, cf, width, height):
        """Get path to test_reference image"""

        return f"resources/test_reference/COLORED_RAW_{cf}_{width}_{height}.npy"


@pytest.fixture(params=AVAILABLE_FORMATS.keys())
def image_data(request):
    color_format = determine_color_format(request.param)
    parser = ParserFactory.create_object(color_format)

    image = None
    expected = None

    for name in glob(f"resources/{color_format.name}*"):
        if (match := re.search(r"(\w+)_(\d+)_(\d+)", name)) is None:
            continue

        cf, width, height = match.group(1, 2, 3)
        width, height = int(width), int(height)

        if cf != color_format.name:
            continue

        with open(name, "rb") as f:
            buffer = f.read()

        image = parser.parse(buffer, color_format, width)

        if environ.get("GENERATE_EXPECTED"):
            RawColoringTestHelpers.generate_expected(parser, image)

        try:
            expected = np.load(
                RawColoringTestHelpers.test_reference_path(cf, width, height))
        except FileNotFoundError:
            pass

        break

    return color_format, parser, image, expected


def test_compare_with_expected(image_data):
    """Compare raw view images generated by raw_coloring with those from test_reference"""

    color_format, parser, image, expected = image_data

    if image is None:
        pytest.skip("Couldn't find an image for %s in resources." %
                    color_format.name)

    if expected is None:
        pytest.skip("Couldn't find a reference for %s in test_references." %
                    color_format.name)

    out = parser.raw_coloring(image)

    assert (out == expected).all()
